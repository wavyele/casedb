<channel version="3.0.3">
  <id>a73da3f1-fa0c-429e-add2-ea0ea4849145</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>ORU R01 To CDS</name>
  <description></description>
  <enabled>true</enabled>
  <lastModified>
    <time>1424945031015</time>
    <timezone>Africa/Nairobi</timezone>
  </lastModified>
  <revision>234</revision>
  <sourceConnector version="3.0.3">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.0.3">
      <responseConnectorProperties version="3.0.3">
        <responseVariable>None</responseVariable>
        <defaultQueueOnResponses>
          <string>None</string>
          <string>Auto-generate (Before processing)</string>
        </defaultQueueOnResponses>
        <defaultQueueOffResponses>
          <string>None</string>
          <string>Auto-generate (Before processing)</string>
          <string>Auto-generate (After source transformer)</string>
          <string>Auto-generate (Destinations completed)</string>
          <string>Postprocessor</string>
        </defaultQueueOffResponses>
        <respondAfterProcessing>true</respondAfterProcessing>
      </responseConnectorProperties>
    </properties>
    <transformer version="3.0.3">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>givenName</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;givenName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>givenName</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>familyName</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;familyName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>familyName</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <name>msg_dt</name>
          <script>var msg_dt = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
var final_msg_dt = null;
if(msg_dt != &quot;&quot;){
var formatted_msg_dt = msg_dt.substring(0,8);
final_msg_dt = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_msg_dt);
}
channelMap.put(&apos;final_msg_dt&apos;,final_msg_dt);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var msg_dt = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
var final_msg_dt = null;
if(msg_dt != &quot;&quot;){
var formatted_msg_dt = msg_dt.substring(0,8);
final_msg_dt = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_msg_dt);
}
channelMap.put(&apos;final_msg_dt&apos;,final_msg_dt);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>marital_status</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;marital_status&apos;, validate( mapping , &apos;&apos;, new Array(new Array(&quot;SINGLE&quot;, &quot;1&quot;),new Array(&quot;MONOGAMOUS_MARRIED&quot;, &quot;2&quot;),new Array(&quot;POLYGAMOUS_MARRIED&quot;, &quot;3&quot;),new Array(&quot;DIVORCED&quot;, &quot;4&quot;),new Array(&quot;SEPARATED&quot;, &quot;5&quot;),new Array(&quot;WIDOWED&quot;, &quot;6&quot;),new Array(&quot;COHABITING&quot;, &quot;7&quot;),new Array(&quot;MISSING&quot;, &quot;8&quot;),new Array(&quot;UNKNOWN&quot;, &quot;9&quot;))));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>marital_status</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list>
                <string-array>
                  <string>&quot;SINGLE&quot;</string>
                  <string>&quot;1&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;MONOGAMOUS_MARRIED&quot;</string>
                  <string>&quot;2&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;POLYGAMOUS_MARRIED&quot;</string>
                  <string>&quot;3&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;DIVORCED&quot;</string>
                  <string>&quot;4&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;SEPARATED&quot;</string>
                  <string>&quot;5&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;WIDOWED&quot;</string>
                  <string>&quot;6&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;COHABITING&quot;</string>
                  <string>&quot;7&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;MISSING&quot;</string>
                  <string>&quot;8&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;UNKNOWN&quot;</string>
                  <string>&quot;9&quot;</string>
                </string-array>
              </list>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>4</sequenceNumber>
          <name>identifier_value</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;identifier_value&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>identifier_value</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>5</sequenceNumber>
          <name>dob</name>
          <script>var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
var final_dob = null;
if(dob != &quot;&quot;){
var formatted_dob = dob.substring(0,8);
final_dob = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_dob);
}
channelMap.put(&apos;final_dob&apos;,final_dob);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
var final_dob = null;
if(dob != &quot;&quot;){
var formatted_dob = dob.substring(0,8);
final_dob = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_dob);
}
channelMap.put(&apos;final_dob&apos;,final_dob);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>6</sequenceNumber>
          <name>identifiers</name>
          <script>var i = 0;
var identifiers = new Packages.java.util.ArrayList();
var identifier_type_id=0;
var  identifier = 0;
while ( msg[&apos;PID&apos;][&apos;PID.3&apos;][i] != null &amp;&amp; msg[&apos;PID&apos;][&apos;PID.3&apos;][i].toString() != &quot;&quot;) {

patient_identifier_type = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.5&apos;].toString();
identifier = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.1&apos;].toString();

if (patient_identifier_type == &quot;CCC_NUMBER&quot;) { 
identifier_type_id = 1;
} else if (patient_identifier_type == &quot;PMTCT_NUMBER&quot;) {
identifier_type_id = 2;
}else if (patient_identifier_type == &quot;ANC_NUMBER&quot;) {
identifier_type_id = 3;
}else if (patient_identifier_type == &quot;NATIONAL_ID&quot;) {
identifier_type_id = 4;
}else if (patient_identifier_type == &quot;PID_NUMBER&quot;) {
identifier_type_id = 5;
}
var new_id =  identifier_type_id+&quot; &quot; +identifier;
identifiers.add(new_id);

var i = i+1;
}

channelMap.put(&apos;identifiers&apos;,identifiers);

logger.info(&quot;identifiers &quot;+identifiers);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var i = 0;
var identifiers = new Packages.java.util.ArrayList();
var identifier_type_id=0;
var  identifier = 0;
while ( msg[&apos;PID&apos;][&apos;PID.3&apos;][i] != null &amp;&amp; msg[&apos;PID&apos;][&apos;PID.3&apos;][i].toString() != &quot;&quot;) {

patient_identifier_type = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.5&apos;].toString();
identifier = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.1&apos;].toString();

if (patient_identifier_type == &quot;CCC_NUMBER&quot;) { 
identifier_type_id = 1;
} else if (patient_identifier_type == &quot;PMTCT_NUMBER&quot;) {
identifier_type_id = 2;
}else if (patient_identifier_type == &quot;ANC_NUMBER&quot;) {
identifier_type_id = 3;
}else if (patient_identifier_type == &quot;NATIONAL_ID&quot;) {
identifier_type_id = 4;
}else if (patient_identifier_type == &quot;PID_NUMBER&quot;) {
identifier_type_id = 5;
}
var new_id =  identifier_type_id+&quot; &quot; +identifier;
identifiers.add(new_id);

var i = i+1;
}

channelMap.put(&apos;identifiers&apos;,identifiers);

logger.info(&quot;identifiers &quot;+identifiers);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>7</sequenceNumber>
          <name>sex</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sex&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>sex</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>8</sequenceNumber>
          <name>middle_name</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;middle_name&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>middle_name</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>9</sequenceNumber>
          <name>uuid</name>
          <script>var uuid = UUIDGenerator.getUUID();

channelMap.put(&apos;uuid&apos;,uuid);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var uuid = UUIDGenerator.getUUID();

channelMap.put(&apos;uuid&apos;,uuid);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>10</sequenceNumber>
          <name>date_created</name>
          <script>var created = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
var date_created = null;
if(created !=&quot;&quot;){
var formatted = created.substring(0,8);
date_created = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted);
}
channelMap.put(&apos;date_created&apos;,date_created);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var created = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
var date_created = null;
if(created !=&quot;&quot;){
var formatted = created.substring(0,8);
date_created = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted);
}
channelMap.put(&apos;date_created&apos;,date_created);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>11</sequenceNumber>
          <name>messageId</name>
          <script>$c(&apos;messageId&apos;,messageObject.getId());</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>$c(&apos;messageId&apos;,messageObject.getId());</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>12</sequenceNumber>
          <name>mfl_code</name>
          <script>var mapping;try { mapping = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;mfl_code&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>mfl_code</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>13</sequenceNumber>
          <name>identifier_type</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;identifier_type&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>identifier_type</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>14</sequenceNumber>
          <name>get person id</name>
          <script>var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/casebased&apos;,&apos;root&apos;,&apos;&apos;);
	
	var pid_number=&quot;&quot;;

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		if(details[0]==&quot;5&quot;)
		{
			pid_number = details[1];
		}

	}

	//The PID_NUMBER never changes, so we use it to find this patient&apos;s patient_id
	var SQL = &quot;SELECT * FROM casebased.person_identifier where identifier = &apos;&quot;+ pid_number +&quot;&apos; AND facility_code =&apos;&quot;+$(&apos;mfl_code&apos;)+&quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL);
	
	var person_id;

if(!result.isBeforeFirst()){

	var result = &quot;INSERT INTO person ( marital_status, person_guid, first_name, middle_name, last_name, sex, birthdate, deathdate, date_created, date_modified, patient_source_id) VALUES (?,? , ?, ?,?, ?, ?, ?,? , ?,? )&quot;;

	var params = new java.util.ArrayList();

	var marital_st = $(&apos;marital_status&apos;);

	if(marital_st==&quot;&quot;)
	{marital_st = null;}
	params.add(marital_st);

	params.add($(&apos;uuid&apos;));
	params.add($(&apos;givenName&apos;).toUpperCase());
	params.add($(&apos;middle_name&apos;).toUpperCase());
	params.add($(&apos;familyName&apos;).toUpperCase());
	params.add($(&apos;sex&apos;));
	params.add($(&apos;final_dob&apos;));
	params.add(null);
	params.add($(&apos;date_created&apos;));
	params.add(null);
	params.add(null);

	var result2 = dbConn.executeUpdate(result, params);


	var SQL1 = &quot;SELECT * FROM casebased.person where person_guid= &apos;&quot; + $(&apos;uuid&apos;) + &quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL1);
	result.first();

	
	person_id = result.getInt(&quot;person_id&quot;);

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		var expression = &quot;INSERT INTO person_identifier ( identifier, identifier_type_id, person_id, facility_code) VALUES ( ?, ?, ?,?)&quot;;
	
		var params1 = new java.util.ArrayList();
		params1.add(details[1]);
		params1.add(details[0]);
		params1.add(person_id);
		params1.add($(&apos;mfl_code&apos;));
		var result2 = dbConn.executeUpdate(expression, params1);
	}
}
else {
result.first();
person_id = result.getInt(&quot;person_id&quot;);
}

channelMap.put(&apos;person_id&apos;,person_id);

	
}
 finally {
	if (dbConn) { 
		dbConn.close();
	}
}</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/casebased&apos;,&apos;root&apos;,&apos;&apos;);
	
	var pid_number=&quot;&quot;;

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		if(details[0]==&quot;5&quot;)
		{
			pid_number = details[1];
		}

	}

	//The PID_NUMBER never changes, so we use it to find this patient&apos;s patient_id
	var SQL = &quot;SELECT * FROM casebased.person_identifier where identifier = &apos;&quot;+ pid_number +&quot;&apos; AND facility_code =&apos;&quot;+$(&apos;mfl_code&apos;)+&quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL);
	
	var person_id;

if(!result.isBeforeFirst()){

	var result = &quot;INSERT INTO person ( marital_status, person_guid, first_name, middle_name, last_name, sex, birthdate, deathdate, date_created, date_modified, patient_source_id) VALUES (?,? , ?, ?,?, ?, ?, ?,? , ?,? )&quot;;

	var params = new java.util.ArrayList();

	var marital_st = $(&apos;marital_status&apos;);

	if(marital_st==&quot;&quot;)
	{marital_st = null;}
	params.add(marital_st);

	params.add($(&apos;uuid&apos;));
	params.add($(&apos;givenName&apos;).toUpperCase());
	params.add($(&apos;middle_name&apos;).toUpperCase());
	params.add($(&apos;familyName&apos;).toUpperCase());
	params.add($(&apos;sex&apos;));
	params.add($(&apos;final_dob&apos;));
	params.add(null);
	params.add($(&apos;date_created&apos;));
	params.add(null);
	params.add(null);

	var result2 = dbConn.executeUpdate(result, params);


	var SQL1 = &quot;SELECT * FROM casebased.person where person_guid= &apos;&quot; + $(&apos;uuid&apos;) + &quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL1);
	result.first();

	
	person_id = result.getInt(&quot;person_id&quot;);

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		var expression = &quot;INSERT INTO person_identifier ( identifier, identifier_type_id, person_id, facility_code) VALUES ( ?, ?, ?,?)&quot;;
	
		var params1 = new java.util.ArrayList();
		params1.add(details[1]);
		params1.add(details[0]);
		params1.add(person_id);
		params1.add($(&apos;mfl_code&apos;));
		var result2 = dbConn.executeUpdate(expression, params1);
	}
}
else {
result.first();
person_id = result.getInt(&quot;person_id&quot;);
}

channelMap.put(&apos;person_id&apos;,person_id);

	
}
 finally {
	if (dbConn) { 
		dbConn.close();
	}
}</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>15</sequenceNumber>
          <name>filename</name>
          <script>var mfl_code = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString();
var pid_number = msg[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;].toString();
globalChannelMap.put(&apos;filename&apos;,mfl_code+&quot;_&quot;+pid_number+&quot;_&quot;+$(&apos;uuid&apos;));</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var mfl_code = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString();
var pid_number = msg[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;].toString();
globalChannelMap.put(&apos;filename&apos;,mfl_code+&quot;_&quot;+pid_number+&quot;_&quot;+$(&apos;uuid&apos;));</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">TVNIfF5+XCZ8Q1BBRHxOZydpeWEgSGVhbHRoIENlbnRlcl4xNDA4MHxNSVJUSCBDRFN8UkVHSU9O
QUwgQ0RTfDIwMTUwMjIwMTI1NjU4LjE3MyswMzAwfHxPUlVeUjAxXk9SVV9SMDF8MzYxMDF8UHwy
LjR8MQ1QSUR8fHw4ODg4ODheXl5eTkFUSU9OQUxfSUR+NDQ0NDReXl5eSEVJX05VTUJFUn4xMjM0
NTZeXl5eQ0NDX05VTUJFUnx8T2RoaWFtYm9ec3RhbnNsYXVzXk1pY2hhZWx8fDIwMTUwMjIwMTI1
NjU0LjErMDMwMHxNQUxFfHx8fHx8fHxTRVBBUkFURUQNT0JSfDE0MDgwfHwxNDA4MF5OZydpeWEg
SGVhbHRoIENlbnRlcnwxNDA4MA1PQlh8MXxTVHxeSEVJR0hUXkFTNC9TTk9NRUR8MnwxNjh8XkNN
fHx8fHxQfDIwMTUwMjIwMTI1NjU4LjE2NSswMzAwfHwyMDE1MDIyMDEyNTY1OC4xNjUrMDMwMA1P
Qlh8MnxTVHxeSEVJR0hUXkFTNC9TTk9NRUR8MnwxNjh8XkNNfHx8fHxQfDIwMTUwMjIwMTI1NjU4
LjE2NSswMzAwfHwyMDE1MDIyMDEyNTY1OC4xNjUrMDMwMA==</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.0.3">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.0.3">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.0.3">
        <queueConnectorProperties version="3.0.3">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <threadCount>1</threadCount>
        </queueConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
      </properties>
      <transformer version="3.0.3">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>New Step</name>
            <script>var dbConn;
try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/casebased&apos;,&apos;root&apos;,&apos;&apos;);
	for each (obx in msg..OBX) {

	var SQL = &quot;SELECT * FROM casebased.events where name= &apos;&quot; + obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] + &quot;&apos;&quot;;
	var result1 = dbConn.executeCachedQuery(SQL);
	
	if (!result1.isBeforeFirst() ) {}

	result1.first();
	var event_id = result1.getInt(&quot;idevent&quot;);
	var is_sentinel = result1.getBoolean(&quot;singleton_event&quot;);
	var event_datatype = result1.getString(&quot;event_datatype&quot;);


	var obs_date = obx[&apos;OBX.14&apos;][&apos;OBX.14.1&apos;];
	var formatted_obs_date = obs_date.substring(0,8);
	var final_obs_date = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_obs_date);

  	obs_identifier = obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;];
	obs_value = obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;];
	
	var SQL1 = &quot;SELECT * FROM casebased.personevents where person_id= &apos;&quot; + $(&apos;person_id&apos;) + &quot;&apos; and eventdatetime= &apos;&quot;+final_obs_date+&quot;&apos; and event_id=&apos;&quot;+event_id+&quot;&apos; and facility_mflcode=&apos;&quot;+msg[&apos;OBR&apos;][&apos;OBR.1&apos;][&apos;OBR.1.1&apos;].toString()+&quot;&apos;;&quot;;
	var reported_event = dbConn.executeCachedQuery(SQL1);

	if (!reported_event.isBeforeFirst() ) {

		var result = &quot;INSERT INTO personevents (person_id, facility_mflcode, event_id, msg_datetime, eventdatetime, value_text,&quot;;
		result +=&quot;value_boolean,value_datetime,value_numeric,value_coded)&quot;;
		result +=&quot; VALUES (?, ?, ?,?, ?, ?, ?,?, ?, ?)&quot;;

		var params = new java.util.ArrayList();
		params.add($(&apos;person_id&apos;));
		params.add(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString());
		params.add(event_id);
		params.add($(&apos;final_msg_dt&apos;));
		params.add(final_obs_date);

		
		//save event on the correct column..
		if(event_datatype==&quot;DATE&quot;)
		{
			//format to correct format
			var formatted_obs_value = obs_value.substring(0,8);
			var final_obs_value = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_obs_value);
			params.add(null);
			params.add(null);
			params.add(final_obs_value);
			params.add(null);
			params.add(null);
		}
		else if(event_datatype==&quot;INTEGER&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
			params.add(null);
		}
		else if(event_datatype==&quot;STRING&quot;)
		{
			params.add(obs_value.toString());
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(null);
		}
		else if(event_datatype==&quot;DOUBLE&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
			params.add(null);
		}
		
		var result2 = dbConn.executeUpdate(result, params);
		
		if(is_sentinel&gt;0)
		{
			//send out an alert message
			var messagebody = &apos;PATTIENT ID NUMBER: &apos;+($(&apos;identifiers&apos;).get(0).split(&quot; &quot;))[1];
			messagebody +=&apos;\nEVENT NAME: &apos;+obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;];
			messagebody +=&apos;\nEVENT VALUE: &apos;+obs_value.toString()+&apos;\nEVENT OBSERVED AT: &apos;+final_obs_date;
			
			var smtpConn = SMTPConnectionFactory.createSMTPConnection();
			smtpConn.send(&apos;tedb19@gmail.com&apos;, &apos;mstans8@gmail.com&apos;, &apos;tedb19@gmail.com&apos;, &apos;SENTINEL EVENT OCCURANCE: &apos;+obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;],
 			messagebody);
				
		}
	}else{

	reported_event.first();
	var personevents_id = reported_event.getInt(&quot;personevents_id&quot;);

	//update all except date_created and uuid of the patient
	var update_sql = &quot;UPDATE casebased.personevents SET &quot;;
	update_sql += &quot;facility_mflcode = ?, &quot;;
	update_sql += &quot;msg_datetime = ?, &quot;;
	update_sql += &quot;eventdatetime = ?, &quot;;
	update_sql += &quot;value_text = ?, &quot;;
	update_sql += &quot;value_boolean = ?, &quot;;
	update_sql += &quot;value_datetime = ?, &quot;;
	update_sql += &quot;value_numeric = ? &quot;;
	update_sql += &quot;WHERE personevents_id = ?;&quot;;

	var params = new java.util.ArrayList();
	
	params.add(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString());
	params.add($(&apos;final_msg_dt&apos;));
	params.add(final_obs_date);

		//save event on the correct column..
		if(event_datatype==&quot;DATE&quot;)
		{
			//format to correct format
			var formatted_obs_value = obs_value.substring(0,8);
			var final_obs_value = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_obs_value);
			params.add(null);
			params.add(null);
			params.add(final_obs_value);
			params.add(null);
		}
		else if(event_datatype==&quot;INTEGER&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
		}
		else if(event_datatype==&quot;STRING&quot;)
		{
			params.add(obs_value.toString());
			params.add(null);
			params.add(null);
			params.add(null);
		}
		else if(event_datatype==&quot;DOUBLE&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
		}

	params.add(personevents_id);

	var result2 = dbConn.executeUpdate(update_sql, params);

	logger.info(update_sql);

}
	}
	
	
} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var dbConn;
try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/casebased&apos;,&apos;root&apos;,&apos;&apos;);
	for each (obx in msg..OBX) {

	var SQL = &quot;SELECT * FROM casebased.events where name= &apos;&quot; + obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] + &quot;&apos;&quot;;
	var result1 = dbConn.executeCachedQuery(SQL);
	
	if (!result1.isBeforeFirst() ) {}

	result1.first();
	var event_id = result1.getInt(&quot;idevent&quot;);
	var is_sentinel = result1.getBoolean(&quot;singleton_event&quot;);
	var event_datatype = result1.getString(&quot;event_datatype&quot;);


	var obs_date = obx[&apos;OBX.14&apos;][&apos;OBX.14.1&apos;];
	var formatted_obs_date = obs_date.substring(0,8);
	var final_obs_date = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_obs_date);

  	obs_identifier = obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;];
	obs_value = obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;];
	
	var SQL1 = &quot;SELECT * FROM casebased.personevents where person_id= &apos;&quot; + $(&apos;person_id&apos;) + &quot;&apos; and eventdatetime= &apos;&quot;+final_obs_date+&quot;&apos; and event_id=&apos;&quot;+event_id+&quot;&apos; and facility_mflcode=&apos;&quot;+msg[&apos;OBR&apos;][&apos;OBR.1&apos;][&apos;OBR.1.1&apos;].toString()+&quot;&apos;;&quot;;
	var reported_event = dbConn.executeCachedQuery(SQL1);

	if (!reported_event.isBeforeFirst() ) {

		var result = &quot;INSERT INTO personevents (person_id, facility_mflcode, event_id, msg_datetime, eventdatetime, value_text,&quot;;
		result +=&quot;value_boolean,value_datetime,value_numeric,value_coded)&quot;;
		result +=&quot; VALUES (?, ?, ?,?, ?, ?, ?,?, ?, ?)&quot;;

		var params = new java.util.ArrayList();
		params.add($(&apos;person_id&apos;));
		params.add(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString());
		params.add(event_id);
		params.add($(&apos;final_msg_dt&apos;));
		params.add(final_obs_date);

		
		//save event on the correct column..
		if(event_datatype==&quot;DATE&quot;)
		{
			//format to correct format
			var formatted_obs_value = obs_value.substring(0,8);
			var final_obs_value = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_obs_value);
			params.add(null);
			params.add(null);
			params.add(final_obs_value);
			params.add(null);
			params.add(null);
		}
		else if(event_datatype==&quot;INTEGER&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
			params.add(null);
		}
		else if(event_datatype==&quot;STRING&quot;)
		{
			params.add(obs_value.toString());
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(null);
		}
		else if(event_datatype==&quot;DOUBLE&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
			params.add(null);
		}
		
		var result2 = dbConn.executeUpdate(result, params);
		
		if(is_sentinel&gt;0)
		{
			//send out an alert message
			var messagebody = &apos;PATTIENT ID NUMBER: &apos;+($(&apos;identifiers&apos;).get(0).split(&quot; &quot;))[1];
			messagebody +=&apos;\nEVENT NAME: &apos;+obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;];
			messagebody +=&apos;\nEVENT VALUE: &apos;+obs_value.toString()+&apos;\nEVENT OBSERVED AT: &apos;+final_obs_date;
			
			var smtpConn = SMTPConnectionFactory.createSMTPConnection();
			smtpConn.send(&apos;tedb19@gmail.com&apos;, &apos;mstans8@gmail.com&apos;, &apos;tedb19@gmail.com&apos;, &apos;SENTINEL EVENT OCCURANCE: &apos;+obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;],
 			messagebody);
				
		}
	}else{

	reported_event.first();
	var personevents_id = reported_event.getInt(&quot;personevents_id&quot;);

	//update all except date_created and uuid of the patient
	var update_sql = &quot;UPDATE casebased.personevents SET &quot;;
	update_sql += &quot;facility_mflcode = ?, &quot;;
	update_sql += &quot;msg_datetime = ?, &quot;;
	update_sql += &quot;eventdatetime = ?, &quot;;
	update_sql += &quot;value_text = ?, &quot;;
	update_sql += &quot;value_boolean = ?, &quot;;
	update_sql += &quot;value_datetime = ?, &quot;;
	update_sql += &quot;value_numeric = ? &quot;;
	update_sql += &quot;WHERE personevents_id = ?;&quot;;

	var params = new java.util.ArrayList();
	
	params.add(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString());
	params.add($(&apos;final_msg_dt&apos;));
	params.add(final_obs_date);

		//save event on the correct column..
		if(event_datatype==&quot;DATE&quot;)
		{
			//format to correct format
			var formatted_obs_value = obs_value.substring(0,8);
			var final_obs_value = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_obs_value);
			params.add(null);
			params.add(null);
			params.add(final_obs_value);
			params.add(null);
		}
		else if(event_datatype==&quot;INTEGER&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
		}
		else if(event_datatype==&quot;STRING&quot;)
		{
			params.add(obs_value.toString());
			params.add(null);
			params.add(null);
			params.add(null);
		}
		else if(event_datatype==&quot;DOUBLE&quot;)
		{
			params.add(null);
			params.add(null);
			params.add(null);
			params.add(parseInt(obs_value.toString()));
		}

	params.add(personevents_id);

	var result2 = dbConn.executeUpdate(update_sql, params);

	logger.info(update_sql);

}
	}
	
	
} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8T3Blbk1SUy1LZW55YUVNUnxKYXJhbW9naSBPZ2luZ2EgT2RpbmdhIFRlYWNoaW5n
IGFuZCByZWZycmFsIGhvc3BpdGFsXjEzOTM5fE1JUlRIIENEU3x8MjAxNTAyMjYxMTAyMjd8fE9S
VV5SMDFeT1JVX1IwMXwyMDE1MDIyNjExMDIyN3xUIHwyLjR8MQ1QSUR8fHw2Nzg0OTQ5Xl5eXkND
Q19OVU1CRVJ+NDFeXl5eUElEX05VTUJFUn4yNjQ3Mzg5Ml5eXl5OQVRJT05BTF9JRHx8TWFibGVe
TXVodW5qYV5LaWJ3ZXppfHwxOTkzMDMyNzAwMDAwMHxGRU1BTEV8fHx8fHx8fERJVk9SQ0VEDU9C
UnwxMzcxNHx8MTM3MTReSmFyYW1vZ2kgT2dpbmdhIE9kaW5nYSBUZWFjaGluZyBhbmQgcmVmZXJy
YWwgaG9zcGl0YWx8MTM5MzkNT0JYfDB8U1R8XkNENF9DT1VOVF5JQ0QxMHx8NDUwLjB8fHx8fHx8
fHwyMDE1MDEwMjAwMDAwMA==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.0.3">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.0.3">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
var uuid = UUIDGenerator.getUUID();

if ($r(&apos;Destination 1&apos;).getStatus() == &apos;ERROR&apos;)
{
var filename = globalChannelMap.get(&apos;filename&apos;);

FileUtil.write(&apos;D:\\PROJECTS\\HIV CASE BASED SURVEILLANCE\\ERRORED\\&apos;+filename, false, message.getConnectorMessages().get(0).getEncodedData());

}

globalMap.put(&quot;transformed&quot;, message.getConnectorMessages().get(0).getEncodedData());
</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
  <properties version="3.0.3">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set">
      <string>CDS</string>
    </tags>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties>
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
  </properties>
</channel>