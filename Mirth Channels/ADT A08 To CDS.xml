<channel version="3.0.3">
  <id>5c47cc32-0f9b-4c8b-b50f-3f231b21720a</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>ADT A08 To CDS</name>
  <description></description>
  <enabled>true</enabled>
  <lastModified>
    <time>1424944945100</time>
    <timezone>Africa/Nairobi</timezone>
  </lastModified>
  <revision>42</revision>
  <sourceConnector version="3.0.3">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.0.3">
      <responseConnectorProperties version="3.0.3">
        <responseVariable>None</responseVariable>
        <defaultQueueOnResponses>
          <string>None</string>
          <string>Auto-generate (Before processing)</string>
        </defaultQueueOnResponses>
        <defaultQueueOffResponses>
          <string>None</string>
          <string>Auto-generate (Before processing)</string>
          <string>Auto-generate (After source transformer)</string>
          <string>Auto-generate (Destinations completed)</string>
          <string>Postprocessor</string>
        </defaultQueueOffResponses>
        <respondAfterProcessing>true</respondAfterProcessing>
      </responseConnectorProperties>
    </properties>
    <transformer version="3.0.3">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>givenName</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;givenName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>givenName</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>familyName</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;familyName&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>familyName</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <name>marital_status</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;marital_status&apos;, validate( mapping , &apos;&apos;, new Array(new Array(&quot;SINGLE&quot;, &quot;1&quot;),new Array(&quot;MONOGAMOUS_MARRIED&quot;, &quot;2&quot;),new Array(&quot;POLYGAMOUS_MARRIED&quot;, &quot;3&quot;),new Array(&quot;DIVORCED&quot;, &quot;4&quot;),new Array(&quot;SEPARATED&quot;, &quot;5&quot;),new Array(&quot;WIDOWED&quot;, &quot;6&quot;),new Array(&quot;COHABITING&quot;, &quot;7&quot;),new Array(&quot;MISSING&quot;, &quot;8&quot;),new Array(&quot;UNKNOWN&quot;, &quot;9&quot;))));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>marital_status</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list>
                <string-array>
                  <string>&quot;SINGLE&quot;</string>
                  <string>&quot;1&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;MONOGAMOUS_MARRIED&quot;</string>
                  <string>&quot;2&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;POLYGAMOUS_MARRIED&quot;</string>
                  <string>&quot;3&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;DIVORCED&quot;</string>
                  <string>&quot;4&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;SEPARATED&quot;</string>
                  <string>&quot;5&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;WIDOWED&quot;</string>
                  <string>&quot;6&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;COHABITING&quot;</string>
                  <string>&quot;7&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;MISSING&quot;</string>
                  <string>&quot;8&quot;</string>
                </string-array>
                <string-array>
                  <string>&quot;UNKNOWN&quot;</string>
                  <string>&quot;9&quot;</string>
                </string-array>
              </list>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>identifier_value</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;identifier_value&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>identifier_value</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>4</sequenceNumber>
          <name>dob</name>
          <script>var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
var final_dob = null;
if(dob != &quot;&quot;){
var formatted_dob = dob.substring(0,8);
final_dob = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_dob);
}
channelMap.put(&apos;final_dob&apos;,final_dob);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
var final_dob = null;
if(dob != &quot;&quot;){
var formatted_dob = dob.substring(0,8);
final_dob = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted_dob);
}
channelMap.put(&apos;final_dob&apos;,final_dob);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>5</sequenceNumber>
          <name>identifiers</name>
          <script>var i = 0;
var identifiers = new Packages.java.util.ArrayList();
var identifier_type_id=0;
var  identifier = 0;
while ( msg[&apos;PID&apos;][&apos;PID.3&apos;][i] != null &amp;&amp; msg[&apos;PID&apos;][&apos;PID.3&apos;][i].toString() != &quot;&quot;) {

patient_identifier_type = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.5&apos;].toString();
identifier = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.1&apos;].toString();

if (patient_identifier_type == &quot;CCC_NUMBER&quot;) { 
identifier_type_id = 1;
} else if (patient_identifier_type == &quot;PMTCT_NUMBER&quot;) {
identifier_type_id = 2;
}else if (patient_identifier_type == &quot;ANC_NUMBER&quot;) {
identifier_type_id = 3;
}else if (patient_identifier_type == &quot;NATIONAL_ID&quot;) {
identifier_type_id = 4;
}else if (patient_identifier_type == &quot;PID_NUMBER&quot;) {
identifier_type_id = 5;
}
var new_id =  identifier_type_id+&quot; &quot; +identifier;
identifiers.add(new_id);

var i = i+1;
}

channelMap.put(&apos;identifiers&apos;,identifiers);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var i = 0;
var identifiers = new Packages.java.util.ArrayList();
var identifier_type_id=0;
var  identifier = 0;
while ( msg[&apos;PID&apos;][&apos;PID.3&apos;][i] != null &amp;&amp; msg[&apos;PID&apos;][&apos;PID.3&apos;][i].toString() != &quot;&quot;) {

patient_identifier_type = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.5&apos;].toString();
identifier = msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.1&apos;].toString();

if (patient_identifier_type == &quot;CCC_NUMBER&quot;) { 
identifier_type_id = 1;
} else if (patient_identifier_type == &quot;PMTCT_NUMBER&quot;) {
identifier_type_id = 2;
}else if (patient_identifier_type == &quot;ANC_NUMBER&quot;) {
identifier_type_id = 3;
}else if (patient_identifier_type == &quot;NATIONAL_ID&quot;) {
identifier_type_id = 4;
}else if (patient_identifier_type == &quot;PID_NUMBER&quot;) {
identifier_type_id = 5;
}
var new_id =  identifier_type_id+&quot; &quot; +identifier;
identifiers.add(new_id);

var i = i+1;
}

channelMap.put(&apos;identifiers&apos;,identifiers);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>6</sequenceNumber>
          <name>sex</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;sex&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>sex</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>7</sequenceNumber>
          <name>middle_name</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;middle_name&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>middle_name</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>8</sequenceNumber>
          <name>uuid</name>
          <script>var uuid = UUIDGenerator.getUUID();

channelMap.put(&apos;uuid&apos;,uuid);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var uuid = UUIDGenerator.getUUID();

channelMap.put(&apos;uuid&apos;,uuid);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>9</sequenceNumber>
          <name>date_created</name>
          <script>var created = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
var date_created = null;
if(created !=&quot;&quot;){
var formatted = created.substring(0,8);
date_created = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted);
}
channelMap.put(&apos;date_created&apos;,date_created);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var created = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
var date_created = null;
if(created !=&quot;&quot;){
var formatted = created.substring(0,8);
date_created = DateUtil.convertDate(&apos;yyyyMMdd&apos;, &apos;yyyy-MM-dd&apos;, formatted);
}
channelMap.put(&apos;date_created&apos;,date_created);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>10</sequenceNumber>
          <name>mfl_code</name>
          <script>var mapping;try { mapping = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;mfl_code&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>mfl_code</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>11</sequenceNumber>
          <name>identifier_type</name>
          <script>var mapping;try { mapping = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;identifier_type&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>identifier_type</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>12</sequenceNumber>
          <name>update patient</name>
          <script>var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/casebased&apos;,&apos;root&apos;,&apos;&apos;);
	
	var pid_number=&quot;&quot;;

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		if(details[0]==&quot;5&quot;)
		{
			pid_number = details[1];
		}

	}

	//The PID_NUMBER never changes, so we use it to find this patient&apos;s patient_id
	var SQL = &quot;SELECT * FROM casebased.person_identifier where identifier = &apos;&quot;+ pid_number +&quot;&apos; AND facility_code =&apos;&quot;+$(&apos;mfl_code&apos;)+&quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL);
	
	var person_id;

if(!result.isBeforeFirst()){
//no patient with that identifier exists!! Save patient and identifiers
var insert_sql = &quot;INSERT INTO person ( marital_status, person_guid, first_name, middle_name, last_name, sex, birthdate, deathdate, date_created, date_modified, patient_source_id) VALUES (?,? , ?, ?,?, ?, ?, ?,? , ?,? )&quot;;

	var params = new java.util.ArrayList();

	var marital_st = $(&apos;marital_status&apos;);
	if(marital_st==&quot;&quot;)
	{marital_st = null;}
	params.add(marital_st);

	params.add($(&apos;uuid&apos;));
	params.add($(&apos;givenName&apos;).toUpperCase());
	params.add($(&apos;middle_name&apos;).toUpperCase());
	params.add($(&apos;familyName&apos;).toUpperCase());
	params.add($(&apos;sex&apos;));
	params.add($(&apos;final_dob&apos;));
	params.add(null);
	params.add($(&apos;date_created&apos;));
	params.add(null);
	params.add(null);

	var result2 = dbConn.executeUpdate(insert_sql, params);


	var SQL1 = &quot;SELECT * FROM casebased.person where person_guid= &apos;&quot; + $(&apos;uuid&apos;) + &quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL1);
	result.first();

	
	person_id = result.getInt(&quot;person_id&quot;);

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		var expression = &quot;INSERT INTO person_identifier ( identifier, identifier_type_id, person_id, facility_code) VALUES ( ?, ?, ?,?)&quot;;
	
		var params1 = new java.util.ArrayList();
		params1.add(details[1]);
		params1.add(details[0]);
		params1.add(person_id);
		params1.add($(&apos;mfl_code&apos;));
		var result2 = dbConn.executeUpdate(expression, params1);
	}
}
else {

	result.first();

	person_id = result.getInt(&quot;person_id&quot;);

	//update all except date_created and uuid of the patient
	var update_sql = &quot;UPDATE casebased.person SET &quot;;
	update_sql += &quot;marital_status = ?, &quot;;
	update_sql += &quot;first_name = ?, &quot;;
	update_sql += &quot;middle_name = ?, &quot;;
	update_sql += &quot;last_name = ?, &quot;;
	update_sql += &quot;sex = ?, &quot;;
	update_sql += &quot;birthdate = ?, &quot;;
	update_sql += &quot;deathdate = ?, &quot;;
	update_sql += &quot;date_modified = ?, &quot;;
	update_sql += &quot;patient_source_id = ? &quot;;
	update_sql += &quot;WHERE person_id = ? ;&quot;;

	var params = new java.util.ArrayList();

	var marital_st = $(&apos;marital_status&apos;);
	if(marital_st==&quot;&quot;)
	{marital_st = null;}

	params.add(marital_st);
	params.add($(&apos;givenName&apos;).toUpperCase());
	params.add($(&apos;middle_name&apos;).toUpperCase());
	params.add($(&apos;familyName&apos;).toUpperCase());
	params.add($(&apos;sex&apos;));
	params.add($(&apos;final_dob&apos;));
	params.add(null);
	params.add($(&apos;date_created&apos;));
	params.add(null);
	params.add(person_id);
	
	var result2 = dbConn.executeUpdate(update_sql, params);
	
	//update patient identifiers
	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		//var expression = &quot;INSERT INTO person_identifier ( identifier, identifier_type_id, person_id) VALUES ( ?, ?, ?)&quot;;
		
		var update_ids_sql = &quot;UPDATE casebased.person_identifier SET &quot;;
		update_ids_sql += &quot;identifier = ? &quot;;
		update_ids_sql += &quot;WHERE person_id = ? AND identifier_type_id = ?;&quot;;

		var params1 = new java.util.ArrayList();
		params1.add(details[1]);
		params1.add(person_id);
		params1.add(details[0]);
		
		var result2 = dbConn.executeUpdate(update_ids_sql, params1);
	}
}



	
}
 finally {
	if (dbConn) { 
		dbConn.close();
	}
}</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/casebased&apos;,&apos;root&apos;,&apos;&apos;);
	
	var pid_number=&quot;&quot;;

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		if(details[0]==&quot;5&quot;)
		{
			pid_number = details[1];
		}

	}

	//The PID_NUMBER never changes, so we use it to find this patient&apos;s patient_id
	var SQL = &quot;SELECT * FROM casebased.person_identifier where identifier = &apos;&quot;+ pid_number +&quot;&apos; AND facility_code =&apos;&quot;+$(&apos;mfl_code&apos;)+&quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL);
	
	var person_id;

if(!result.isBeforeFirst()){
//no patient with that identifier exists!! Save patient and identifiers
var insert_sql = &quot;INSERT INTO person ( marital_status, person_guid, first_name, middle_name, last_name, sex, birthdate, deathdate, date_created, date_modified, patient_source_id) VALUES (?,? , ?, ?,?, ?, ?, ?,? , ?,? )&quot;;

	var params = new java.util.ArrayList();

	var marital_st = $(&apos;marital_status&apos;);
	if(marital_st==&quot;&quot;)
	{marital_st = null;}
	params.add(marital_st);

	params.add($(&apos;uuid&apos;));
	params.add($(&apos;givenName&apos;).toUpperCase());
	params.add($(&apos;middle_name&apos;).toUpperCase());
	params.add($(&apos;familyName&apos;).toUpperCase());
	params.add($(&apos;sex&apos;));
	params.add($(&apos;final_dob&apos;));
	params.add(null);
	params.add($(&apos;date_created&apos;));
	params.add(null);
	params.add(null);

	var result2 = dbConn.executeUpdate(insert_sql, params);


	var SQL1 = &quot;SELECT * FROM casebased.person where person_guid= &apos;&quot; + $(&apos;uuid&apos;) + &quot;&apos;&quot;;
	var result = dbConn.executeCachedQuery(SQL1);
	result.first();

	
	person_id = result.getInt(&quot;person_id&quot;);

	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		var expression = &quot;INSERT INTO person_identifier ( identifier, identifier_type_id, person_id, facility_code) VALUES ( ?, ?, ?,?)&quot;;
	
		var params1 = new java.util.ArrayList();
		params1.add(details[1]);
		params1.add(details[0]);
		params1.add(person_id);
		params1.add($(&apos;mfl_code&apos;));
		var result2 = dbConn.executeUpdate(expression, params1);
	}
}
else {

	result.first();

	person_id = result.getInt(&quot;person_id&quot;);

	//update all except date_created and uuid of the patient
	var update_sql = &quot;UPDATE casebased.person SET &quot;;
	update_sql += &quot;marital_status = ?, &quot;;
	update_sql += &quot;first_name = ?, &quot;;
	update_sql += &quot;middle_name = ?, &quot;;
	update_sql += &quot;last_name = ?, &quot;;
	update_sql += &quot;sex = ?, &quot;;
	update_sql += &quot;birthdate = ?, &quot;;
	update_sql += &quot;deathdate = ?, &quot;;
	update_sql += &quot;date_modified = ?, &quot;;
	update_sql += &quot;patient_source_id = ? &quot;;
	update_sql += &quot;WHERE person_id = ? ;&quot;;

	var params = new java.util.ArrayList();

	var marital_st = $(&apos;marital_status&apos;);
	if(marital_st==&quot;&quot;)
	{marital_st = null;}

	params.add(marital_st);
	params.add($(&apos;givenName&apos;).toUpperCase());
	params.add($(&apos;middle_name&apos;).toUpperCase());
	params.add($(&apos;familyName&apos;).toUpperCase());
	params.add($(&apos;sex&apos;));
	params.add($(&apos;final_dob&apos;));
	params.add(null);
	params.add($(&apos;date_created&apos;));
	params.add(null);
	params.add(person_id);
	
	var result2 = dbConn.executeUpdate(update_sql, params);
	
	//update patient identifiers
	for(var i = 0; i &lt; $(&apos;identifiers&apos;).size(); i++){
		var identifier = $(&apos;identifiers&apos;).get(i);
		var details = identifier.split(&quot; &quot;);

		//var expression = &quot;INSERT INTO person_identifier ( identifier, identifier_type_id, person_id) VALUES ( ?, ?, ?)&quot;;
		
		var update_ids_sql = &quot;UPDATE casebased.person_identifier SET &quot;;
		update_ids_sql += &quot;identifier = ? &quot;;
		update_ids_sql += &quot;WHERE person_id = ? AND identifier_type_id = ?;&quot;;

		var params1 = new java.util.ArrayList();
		params1.add(details[1]);
		params1.add(person_id);
		params1.add(details[0]);
		
		var result2 = dbConn.executeUpdate(update_ids_sql, params1);
	}
}



	
}
 finally {
	if (dbConn) { 
		dbConn.close();
	}
}</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">TVNIfF5+XCZ8Q1BBRHxOZydpeWEgSGVhbHRoIENlbnRlcnxSRUdJT05BTCBDRFN8TUlSVEggQ0RT
fDIwMTUwMjA2MDkxNjMxLjY2MyswMzAwfHxBRFReQTA4XkFEVF9BMDh8NTYzNTAxfFB8Mi40fDEN
UElEfHx8MzUzNTY3Xl5eXlBJRF9OVU1CRVJ+MzUzNTY3Xl5eXkNDQ19OVU1CRVJ8fE9rZXlvXk5p
Y2t5fHwxOTg5MDIxMjAwMDAwMCswMzAwfE1BTEV8fHx8fHx8fFBPTFlHQU1PVVNfTUFSUklFRA==
</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.0.3">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.0.3">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.0.3">
        <queueConnectorProperties version="3.0.3">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <threadCount>1</threadCount>
        </queueConnectorProperties>
        <scheme>FILE</scheme>
        <host>D:/PROJECTS/HIV CASE BASED SURVEILLANCE/ADT^A08</host>
        <outputPattern>${UUID}.hl7</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="3.0.3">
        <steps/>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.0.3">
        <steps/>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.0.3">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.0.3">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.0.3">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.0.3">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.0.3">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
          </responseValidationProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.0.3">
        <rules/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
  <properties version="3.0.3">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set">
      <string>CDS</string>
    </tags>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties>
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
  </properties>
</channel>